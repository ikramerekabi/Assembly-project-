
/*
    This is just a skeleton. It DOES NOT implement all the requirements.
    It only recognizes the RV32I "ADD", "SUB" and "ADDI" instructions only.
    It prints "Unkown Instruction" for all other instructions!

    Usage example:
        $ rvcdiss t1.bin
    should print out:
        0x00000000    0x00100013    ADDI    x0, x0, 0x1
        0x00000004    0x00100093    ADDI    x1, x0, 0x1
        0x00000008    0x00100113    ADDI    x2, x0, 0x1
        0x0000000c    0x001001b3    ADD        x3, x0, x1
        0x00000010    0x00208233    ADD        x4, x1, x2
        0x00000014    0x004182b3    ADD        x5, x3, x4
        0x00000018    0x00100893    ADDI    x11, x0, 0x1
        0x0000001c    0x00028513    ADDI    xa, x5, 0x0
        0x00000020    0x00000073    Unkown Instruction

    References:
    (1) The risc-v ISA Manual ver. 2.1 @ https://riscv.org/specifications/
    (2) https://github.com/michaeljclark/riscv-meta/blob/master/meta/opcodes
*/

#include <iostream>
#include <fstream>
#include "stdlib.h"
#include <iomanip>

using namespace std;

unsigned int pc = 0x0;

char memory[8 * 1024]; // only 8KB of memory located at address 0

void emitError(string s)
{
    cout << s;
    exit(0);
}

void printPrefix(unsigned int instA, unsigned int instW)
{
    cout << "0x" << hex << std::setfill('0') << std::setw(8) << instA << "\t0x" << std::setw(8) << instW;
}

#include <iostream>
#include <string>
#include <sstream>

using namespace std;

// this function chnages the names of the registers to ABI names 
string ABIname(int reg)
{
    string name = "";
    switch (reg)
    {
    case 0:
        name = "zero";
        break;
    case 1:
        name = "ra";
        break;
    case 2:
        name = "sp";
        break;
    case 3:
        name = "gp";
        break;
    case 4:
        name = "tp";
        break;
    case 5:
        name = "t0";
        break;
    case 6:
        name = "t1";
        break;
    case 7:
        name = "t2";
        break;
    case 8:
        name = "s0";
        break;
    case 9:
        name = "s1";
        break;
    case 10:
        name = "a0";
        break;
    case 11:
        name = "a1";
        break;
    case 12:
        name = "a2";
        break;
    case 13:
        name = "a3";
        break;
    case 14:
        name = "a4";
        break;
    case 15:
        name = "a5";
        break;
    case 16:
        name = "a6";
        break;
    case 17:
        name = "a7";
        break;
    case 18:
        name = "s2";
        break;
    case 19:
        name = "s3";
        break;
    case 20:
        name = "s4";
        break;
    case 21:
        name = "s5";
        break;
    case 22:
        name = "s6";
        break;
    case 23:
        name = "s7";
        break;
    case 24:
        name = "s8";
        break;
    case 25:
        name = "s9";
        break;
    case 26:
        name = "s10";
        break;
    case 27:
        name = "s11";
        break;
    case 28:
        name = "t3";
        break;
    case 29:
        name = "t4";
        break;
    case 30:
        name = "t5";
        break;
    case 31:
        name = "t6";
        break;

    default:
        break;
    }
    return name;
}

void instDecExec(unsigned int instWord)
{
    unsigned int t0, t1, t2, t3, rd, rs1, rs2, funct3, funct7, opcode, I_mm_shift, I_mm_S_type_4_0, I_mm_S_type_11_5, I_mm_S_type;
    unsigned int rd_C, rs1_C, Imm_C_2, Imm_C_6, Imm_C_5_3, rs2_C, funct3_C, Imm_C_load, nzImm_4_0, nzImm_5, rd_rs1, I_imm_C, B_imm_C;
    unsigned int opcode_16;
    unsigned int I_imm, S_imm, B_imm, U_imm, J_imm;
    unsigned int address;
    unsigned int rs1_rd_dash, funct2_2, rs2_dash, funct2_1;
    unsigned int nzimm_LUI_16_12, nzimm_LUI_17, nzimm_LUI, imm_C_Jal_5, imm_C_Jal_3_1, imm_C_Jal_7, imm_C_Jal_6, imm_C_Jal_10, imm_C_Jal_9_8, imm_C_Jal_4, imm_C_Jal_11, imm_C_Jal;

    unsigned int instPC = pc - 4;

    opcode_16 = instWord & 0x00000003;
    opcode = instWord & 0x0000007F;
    rd = (instWord >> 7) & 0x0000001F;
    I_mm_S_type_4_0 = rd;
    funct3 = (instWord >> 12) & 0x00000007;
    rs1 = (instWord >> 15) & 0x0000001F;
    rs2 = (instWord >> 20) & 0x0000001F;
    funct7 = (instWord >> 25) & 0x0000007F;
    I_mm_S_type_11_5 = funct7;
    I_mm_shift = (instWord >> 20) & 0x0000001F;
    t0 = I_mm_S_type_11_5 & 0x07F;
    t0 = t0 << 5;
    I_mm_S_type = (t0 | I_mm_S_type_4_0);
    // — inst[31] — inst[30:25] inst[24:21] inst[20]
    I_imm = ((instWord >> 20) & 0x7FF) | (((instWord >> 31) ? 0xFFFFF800 : 0x0));
    I_mm_shift = (instWord >> 20) & 0x0000001F; // for SLLI, SRLI, SRAI
    B_imm = ((instWord >> 8) & 0x0F) | ((instWord >> 21) & 0x3F0) | ((instWord << 4) & 0x400) | ((instWord >> 2) & 0x800);
    U_imm = (instWord >> 12) & 0xFFFFF;
    J_imm = ((instWord >> 21) & 0x3FF) | ((instWord >> 10) & 0x400) | ((instWord >> 1) & 0x7F800) | ((instWord >> 12) & 0x80000);

    // for compressed instructions
    rd_C = (instWord >> 2) & 0x0007;
    Imm_C_6 = (instWord >> 5) & 0x0001;
    Imm_C_2 = (instWord >> 6) & 0x0001;
    rs1_C = (instWord >> 7) & 0x0007;
    Imm_C_5_3 = (instWord >> 10) & 0x0007;
    funct3_C = (instWord >> 13) & 0x0007;
    rs2_C= (instWord >> 2) & 0x0001F;
    t1 = (Imm_C_6 & 0x001) << 6;   // can we just and it with 0x1 instead of 0x001??????
    t2 = (Imm_C_5_3 & 0x007) << 5; // same question for these? ????????????
    Imm_C_load = t1 | t2;
    t3 = (Imm_C_2 & 0x001) << 2;
    Imm_C_load = Imm_C_load | t3;

    // for compressed I types

    nzImm_4_0 = (instWord >> 2) & 0x001F; // store bits from 0 to 4 from the immediate
    rd_rs1 = (instWord >> 7) & 0x001F;    // store the bits of rd/rs
    nzImm_5 = (instWord >> 12) & 0x0001;  // store the last bit of the immediate

    I_imm_C = ((nzImm_5 & 0x1) << 5) | (nzImm_4_0 & 0x1F); // put back the values of the immediate together.

    rs1_rd_dash = (instWord >> 7) & 0x0007; // store the value of rs1'/ rd'
    funct2_2 = (instWord >> 10) & 0x0003;   // store funct2_2 value

    rs2_dash = (instWord >> 2) & 0x0007;
    funct2_1 = (instWord >> 5) & 0x0003;

    // for compressed LUI instruction
    nzimm_LUI_16_12 = (instWord >> 2) & 0x001F;                                 // store bits from 12 to 16 of the nonzero immediate
    nzimm_LUI_17 = (instWord >> 7) & 0x001F;                                    // store bit 17 of the non zero immediate
    nzimm_LUI = ((nzimm_LUI_17 & 0x1) << 17) | ((nzimm_LUI_16_12 & 0xF) << 12); // getting the value for the immediate

    // for compressed JAL
    imm_C_Jal_5 = (instWord >> 2) & 0x001;
    imm_C_Jal_3_1 = (instWord >> 3) & 0x007;
    imm_C_Jal_7 = (instWord >> 6) & 0x001;
    imm_C_Jal_6 = (instWord >> 7) & 0x001;
    imm_C_Jal_10 = (instWord >> 8) & 0x001;
    imm_C_Jal_9_8 = (instWord >> 9) & 0x003;
    imm_C_Jal_4 = (instWord >> 11) & 0x001;
    imm_C_Jal_11 = (instWord >> 12) & 0x001;

    // getting the values of the immediate value for the c.jal
    imm_C_Jal = ((imm_C_Jal_11 & 0x001) << 11) | ((imm_C_Jal_10 & 0x001) << 10) | ((imm_C_Jal_9_8 & 0x003) << 8) | ((imm_C_Jal_7 & 0x001) << 7) | ((imm_C_Jal_6 & 0x001) << 6) | ((imm_C_Jal_5 & 0x001) << 5) | ((imm_C_Jal_4 & 0x001) << 4) | ((imm_C_Jal_3_1 & 0x001) << 1);

    // for compressed B Instructions
    B_imm_C = ((instWord >> 3) & 0xF) | ((instWord << 2) & 0x1F) | ((instWord >> 5) & 0xE0);

    if (opcode_16 == 0x3)
    {
        printPrefix(instPC, instWord);
        // R instructions
        if (opcode == 0x33)
        {
            switch (funct3)
            {
            case 0:
                if (funct7 == 32)
                {
                    cout << "\tSUB\tx" << ABIname(rd) << ", x" <<  ABIname(rs1) << ", x" << ABIname(rs2) << "\n";
                }
                else
                {
                    cout << "\tADD\tx" << ABIname(rd) << ", x" << ABIname(rs1) << ", x" << ABIname(rs2) << "\n";
                }
                break;

            case 2:
                cout << "\tSLT\tx" << ABIname(rd) << ", x" << ABIname(rs1) << ", x" << ABIname(rs2) << "\n";
                break;

            case 1:
                cout << "\tSLL\tx" << ABIname(rd) << ", x" << ABIname(rs1) << ", x" << ABIname(rs2) << "\n";
                break;

            case 3:
                cout << "\tSLTU\tx" << ABIname(rd)<< ", x" << ABIname(rs1) << ", x" << ABIname(rs2) << "\n";
                break;

            case 4:
                cout << "\tXOR\tx" << ABIname(rd) << ", x" << ABIname(rs1) << ", x" << ABIname(rs2) << "\n";
                break;

            case 5:
                if (funct7 == 32)
                {
                    cout << "\tSRA\tx" << ABIname(rd) << ", x" << ABIname(rs1) << ", x" << ABIname(rs2) << "\n";
                }
                else
                {
                    cout << "\tSRL\tx" << ABIname(rd) << ", x" << ABIname(rs1) << ", x" << ABIname(rs2) << "\n";
                }
                break;

            case 6:
                cout << "\tOR\tx" << ABIname(rd) << ", x" << ABIname(rs1) << ", x" << ABIname(rs2) << "\n";
                break;

            case 7:
                cout << "\tAND\tx" << ABIname(rd) << ", x" << ABIname(rs1) << ", x" << ABIname(rs2) << "\n";

                break;

            default:
                cout << "\tUnkown R Instruction \n";
            }
        }
        // I instructions
        else if (opcode == 0x13)
        {
            switch (funct3)
            {
            case 0:
                cout << "\tADDI\tx" << ABIname(rd) << ", x" << ABIname(rs1) << ", " << hex << "0x" << (int)I_imm << "\n";
                break;
            case 2:
                cout << "\tSLTI\tx" << ABIname(rd) << ", x" << ABIname(rs1) << ", " << hex << "0x" << (int)I_imm << "\n";
                break;
            case 3:
                cout << "\tSLTIU\tx" << ABIname(rd) << ", x" << ABIname(rs1) << ", " << hex << "0x" << (int)I_imm << "\n";
                break;
            case 4:
                cout << "\tXORI\tx" << ABIname(rd) << ", x" << ABIname(rs1) << ", " << hex << "0x" << (int)I_imm << "\n";
                break;
            case 6:
                cout << "\tORI\tx" << ABIname(rd) << ", x" << ABIname(rs1) << ", " << hex << "0x" << (int)I_imm << "\n";
                break;
            case 7:
                cout << "\tANDI\tx" << ABIname(rd) << ", x" << ABIname(rs1) << ", " << hex << "0x" << (int)I_imm << "\n";
                break;
            case 1:
                cout << "\tSLLI\tx" << ABIname(rd) << ", x" << ABIname(rs1) << ", " << hex << "0x" << (int)I_mm_shift << "\n";
                break;
            case 5:
                if (funct7 == 32)
                {
                    cout << "\tSRAI\tx" << ABIname(rd) << ", x" << ABIname(rs1) << ", " << hex << "0x" << (int)I_mm_shift << "\n";
                }
                else
                {
                    cout << "\tSRLI\tx" << ABIname(rd) << ", x" << ABIname(rs1) << ", " << hex << "0x" << (int)I_mm_shift << "\n";
                }
                break;
            default:
                cout << "\tUnkown I Instruction \n";
            }
        }
        // S instructions
        else if (opcode == 0x23)
        {
            switch (funct3)
            {
            case 0:
                cout << "\tSB\tx" << ABIname(rs2) << ", " << hex << "0x" << (int)I_mm_S_type << "(x" << ABIname(rs1) << ")"
                     << "\n";
                break;
            case 1:
                cout << "\tSH\tx" << ABIname(rs2) << ", " << hex << "0x" << (int)I_mm_S_type << "(x" << ABIname(rs1) << ")"
                     << "\n";
                break;
            case 2:
                cout << "\tSW\tx" << ABIname(rs2) << ", " << hex << "0x" << (int)I_mm_S_type << "(x" << ABIname(rs1) << ")"
                     << "\n";
                break;
            default:
                cout << "\tUnkown S Instruction \n";
            }
        }
        // I instructions (load instructions)
        else if (opcode == 0x3)
        {
            switch (funct3)
            {
            case 0:
                cout << "\tLB\tx" << ABIname(rd) << ", 0x" << hex << (int)I_imm << "(x" << ABIname(rs1) << ")"
                     << "\n";
                break;
            case 1:
                cout << "\tLH\tx" << ABIname(rd) << ", 0x" << hex << (int)I_imm << "(x" << ABIname(rs1) << ")"
                     << "\n";
                break;
            case 2:
                cout << "\tLW\tx" << ABIname(rd) << ", 0x" << hex << (int)I_imm << "(x" << ABIname(rs1) << ")"
                     << "\n";
                break;
            case 4:
                cout << "\tLBU\tx" << ABIname(rd) << ", 0x" << hex << (int)I_imm << "(x" << ABIname(rs1) << ")"
                     << "\n";
                break;
            case 5:
                cout << "\tLHU\tx" << ABIname(rd) << ", 0x" << hex << (int)I_imm << "(x" << ABIname(rs1) << ")"
                     << "\n";
                break;
            default:
                cout << "\tUnkown I Instruction \n";
            }
        }
        // B Instructions
        else if (opcode == 0x63)
        {
            switch (funct3)
            {
            case 0:
                cout << "\tBEQ\tx" << ABIname(rs1) << ", x" << ABIname(rs2) << ", 0x" << hex << (int)B_imm << "\n";
                break;
            case 1:
                cout << "\tBNE\tx" << ABIname(rs1) << ", x" << ABIname(rs2) << ", 0x" << hex << (int)B_imm << "\n";
                break;
            case 4:
                cout << "\tBLT\tx" << ABIname(rs1) << ", x" << ABIname(rs2) << ", 0x" << hex << (int)B_imm << "\n";
                break;
            case 5:
                cout << "\tBGE\tx" << ABIname(rs1) << ", x" << ABIname(rs2) << ", 0x" << hex << (int)B_imm << "\n";
                break;
            case 6:
                cout << "\tBLTU\tx" << ABIname(rs1) << ", x" << ABIname(rs2) << ", 0x" << hex << (int)B_imm << "\n";
                break;
            case 7:
                cout << "\tBGEU\tx" << ABIname(rs1) << ", x" << ABIname(rs2) << ", 0x" << hex << (int)B_imm << "\n";
                break;
            default:
                cout << "\tUnkown B Instruction \n";
            }
        }

        else if (opcode == 0x37)
        {
            cout << "\tLUI\tx" << ABIname(rd) << ", " << hex << "0x" << (int)U_imm << "\n";
        }
        else if (opcode == 0x17)
        {
            cout << "\tAUIPC\tx" << ABIname(rd) << ", " << hex << "0x" << (int)U_imm << "\n";
        }
        else if (opcode == 0x17)
        {
            cout << "\tJAL\tx" << ABIname(rd) << ", " << hex << "0x" << (int)J_imm << "\n";
        }
        else if (opcode == 0x67)
        {
            cout << "\tJALR\tx" << ABIname(rd) << ", x" << ABIname(rs1) << ", " << hex << "0x" << (int)I_imm << "\n";
        }
        else
        {
            cout << "\tUnkown Instruction \n";
        }
    }
    else
    {
        // Compressed instructions
        if (opcode_16 == 0x0)
        {
            switch (funct3_C)
            {
            case 2:
                cout << "\tC.LW\tx" << ABIname(rd_C+8) << ", 0x" << hex << (int)Imm_C_load << "(x" << ABIname(rs1_C+8) << ")"
                     << "\n";
                break;

            case 6:
                cout << "\tC.SW\tx" << ABIname(rd_C+8) << ", 0x" << hex << (int)Imm_C_load << "(x" << ABIname(rs1_C+8) << ")"
                     << "\n";
                break;
            }
        }
        else if (opcode_16 == 0x1)
        {
            switch (funct3_C)
            {
            // compressed I instructions
            case 0:
                cout << "\tC.ADDI\tx" << ABIname(rd_rs1+8) << ", x" << ABIname(rd_rs1+8) << ", " << hex << "0x" << (int)I_imm_C << "\n";
                break;
            case 1:
                cout << "\tC.JAL\tx1, " <<hex << "0x" << imm_C_Jal << "\n";
                break;
            case 3:
                if (rd_rs1 != 0 && rd_rs1 != 2)
                {
                    cout << "\tC.LUI\tx" << ABIname(rd_rs1+8) << ", " << hex << "0x" << (int)nzimm_LUI << "\n";
                }
            case 4:
                if (funct2_2 == 0)
                {
                    cout << "\tC.SRLI\tx" << ABIname(rs1_rd_dash+8) << ", x" << ABIname(rs1_rd_dash+8) << ", " << hex << "0x" << (int)I_imm_C << "\n";
                }
                else if (funct2_2 == 1)
                {
                    cout << "\tC.SRAI\tx" << ABIname(rs1_rd_dash+8) << ", x" << ABIname(rs1_rd_dash+8) << ", " << hex << "0x" << (int)I_imm_C << "\n";
                }
                else if (funct2_2 == 2)
                {
                    cout << "\tC.ANDI\tx" << ABIname(rs1_rd_dash+8) << ", x" << ABIname(rs1_rd_dash+8) << ", " << hex << "0x" << (int)I_imm_C << "\n";
                    // in the instruction it is written as imm not nzimm , would it make a diff when coding ? should we add extra conditions?
                }
                else if (funct2_2 == 3)
                {
                    switch (funct2_1)
                    {
                    case 0:
                        cout << "\tC.SUB\tx" << ABIname(rs1_rd_dash+8) << ", x" << ABIname(rs1_rd_dash+8) << ", x" << ABIname(rs2_dash+8) << "\n";
                        break;
                    case 1:
                        cout << "\tC.XOR\tx" << ABIname(rs1_rd_dash+8) << ", x" << ABIname(rs1_rd_dash+8) << ", x" << ABIname(rs2_dash+8) << "\n";
                        break;
                    case 2:
                        cout << "\tC.OR\tx" << ABIname(rs1_rd_dash+8) << ", x" << ABIname(rs1_rd_dash+8) << ", x" << ABIname(rs2_dash+8) << "\n";
                        break;
                    case 3:
                        cout << "\tC.AND\tx" << ABIname(rs1_rd_dash+8) << ", x" << ABIname(rs1_rd_dash+8) << ", x" << ABIname(rs2_dash+8) << "\n";
                        break;
                    }
                }
                break;
            case 6:
                cout << "\tC.BEQZ\tx" << ABIname(rs1_C+8) << ", " << hex << "0x" << (int)B_imm_C << "\n";
                break;

            case 7:
                cout << "\tC.BNEZ\tx" << ABIname(rs1_C+8 )<< ", " << hex << "0x" << (int)B_imm_C << "\n";
                break;
            }
        }
        else if (opcode_16 == 0x2)
        {
            switch (funct3_C)
            {
            case 0:
                cout << "\tC.SLLI\tx" << ABIname(rd_rs1+8) << ", x" << ABIname(rd_rs1+8 )<< ", " << hex << "0x" << (int)I_imm_C << "\n";
                break;
            case 4:
                if (rd_rs1 != 0 && rs2_C != 0 && nzImm_5 == 1)
                {
                    cout << "\tC.ADD\tx" << ABIname(rd_rs1+8 )<< ", x" << ABIname( rd_rs1+8) << ", x" << ABIname(rs2_C+8) << "\n";
                }
                else if (rd_rs1 != 0 && rs2_C == 0 && nzImm_5 == 1)
                {
                    cout << "\tC.JALR\tx" << ABIname(rd_rs1+8) << ", 0"
                         << "\n";
                }
                break;
            }
        }
        else
        {
            cout << "\tUnkown Compresssed Instruction \n";
        }
    }
}

int main(int argc, char *argv[])
{

    unsigned int instWord = 0;
    ifstream inFile;
    ofstream outFile;

    if (argc < 2)
        emitError("use: rvcdiss <machine_code_file_name>\n");

    inFile.open(argv[1], ios::in | ios::binary | ios::ate);

    if (inFile.is_open())
    {
        int fsize = inFile.tellg();

        inFile.seekg(0, inFile.beg);
        if (!inFile.read((char *)memory, fsize))
            emitError("Cannot read from input file\n");

        while (true)
        {
            instWord = (unsigned char)memory[pc] |
                       (((unsigned char)memory[pc + 1]) << 8) |
                       (((unsigned char)memory[pc + 2]) << 16) |
                       (((unsigned char)memory[pc + 3]) << 24);
            pc += 4;
            // remove the following line once you have a complete simulator
            if (pc == fsize + 4)
                break; // stop when PC reached address 32
            instDecExec(instWord);
        }
    }
    else
        emitError("Cannot access input file\n");
}
